[{"/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/index.js":"1","/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/components/App.js":"2","/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/components/Router.js":"3","/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/routes/Auth.js":"4","/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/routes/Home.js":"5","/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/fbase.js":"6","/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/components/Navigation.js":"7","/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/routes/Profile.js":"8","/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/components/Nweet.js":"9"},{"size":240,"mtime":1607057427482,"results":"10","hashOfConfig":"11"},{"size":1063,"mtime":1608027059864,"results":"12","hashOfConfig":"11"},{"size":824,"mtime":1607750032404,"results":"13","hashOfConfig":"11"},{"size":2195,"mtime":1607174432500,"results":"14","hashOfConfig":"11"},{"size":2509,"mtime":1607750056810,"results":"15","hashOfConfig":"11"},{"size":764,"mtime":1607339353165,"results":"16","hashOfConfig":"11"},{"size":333,"mtime":1607175304758,"results":"17","hashOfConfig":"11"},{"size":1298,"mtime":1608026973643,"results":"18","hashOfConfig":"11"},{"size":1745,"mtime":1607342315829,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"1yynmfy",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/index.js",["42"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport firebase from './fbase';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/components/App.js",[],"/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/components/Router.js",[],"/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/routes/Auth.js",[],"/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/routes/Home.js",["43"],"import React, { useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { dbService, storageService } from \"fbase\";\nimport Nweet from \"components/Nweet\";\n\nconst Home = ({ userObj }) => {\n  const [nweet, setNweet] = useState(\"\");\n  const [nweets, setNweets] = useState([]);\n  const [attachment, setAttachment] = useState(\"\");\n  useEffect(() => {\n    dbService.collection(\"nweets\").onSnapshot((snapshot) => {\n      const nweetArray = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setNweets(nweetArray);\n    });\n  }, []);\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    let attachmentUrl = \"\";\n    if (attachment !== \"\") {\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`);\n      const response = await attachmentRef.putString(attachment, \"data_url\");\n      attachmentUrl = await response.ref.getDownloadURL();\n    }\n    const nweetObj = {\n      text: nweet,\n      createdAt: Date.now(),\n      creatorId: userObj.uid,\n      attachmentUrl,\n    };\n    await dbService.collection(\"nweets\").add(nweetObj);\n    setNweet(\"\");\n    setAttachment(\"\");\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNweet(value);\n  };\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n  const onClearAttachment = () => {setAttachment(\"null\")};\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input\n          value={nweet}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"What's on your mind?\"\n          maxLength={120}\n        />\n        <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\n        <input type=\"submit\" value=\"Nweet\" />\n        {attachment && (\n          <div>\n            <img src={attachment} width=\"50px\" height=\"50px\" />\n            <button onClick={onClearAttachment}>Clear</button>\n          </div>\n        )}\n      </form>\n      <div>\n        {nweets.map((nweet) => (\n          <Nweet\n            key={nweet.id}\n            nweetObj={nweet}\n            isOwner={nweet.creatorId === userObj.uid}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default Home;","/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/fbase.js",[],["44","45"],"/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/components/Navigation.js",[],"/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/routes/Profile.js",["46"],"/Users/brucechoe/Documents/GitHub/Twitter-clone/nwitter/src/components/Nweet.js",["47"],"import React, { useState } from \"react\";\nimport { dbService, storageService } from \"fbase\";\n\nconst Nweet = ({ nweetObj, isOwner }) => {\n  const [editing, setEditing] = useState(false);\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\n    if (ok) {\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\n      await storageService.refFromURL(nweetObj.attachmentUrl).delete();\n    }\n  };\n  const toggleEditing = () => setEditing((prev) => !prev);\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\n      text: newNweet,\n    });\n    setEditing(false);\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewNweet(value);\n  };\n  return (\n    <div>\n      {editing ? (\n        <>\n          <form onSubmit={onSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"Edit your nweet\"\n              value={newNweet}\n              required\n              onChange={onChange}\n            />\n            <input type=\"submit\" value=\"Update Nweet\" />\n          </form>\n          <button onClick={toggleEditing}>Cancel</button>\n        </>\n      ) : (\n        <>\n          <h4>{nweetObj.text}</h4>\n          {nweetObj.attachmentUrl && \n          (<img src={nweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />)\n          }\n          {isOwner && (\n            <>\n              <button onClick={onDeleteClick}>Delete Nweet</button>\n              <button onClick={toggleEditing}>Edit Nweet</button>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Nweet;",{"ruleId":"48","severity":1,"message":"49","line":4,"column":8,"nodeType":"50","messageId":"51","endLine":4,"endColumn":16},{"ruleId":"52","severity":1,"message":"53","line":74,"column":13,"nodeType":"54","endLine":74,"endColumn":64},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":5,"column":1,"nodeType":"61","endLine":42,"endColumn":3},{"ruleId":"52","severity":1,"message":"53","line":48,"column":12,"nodeType":"54","endLine":48,"endColumn":75},"no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["62"],"no-negated-in-lhs",["63"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]